// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  name        String
  avatar      String?
  gender      GenderEnum?
  phone       String?
  address     String?
  product     Product[]
  role        RoleEnum      @default(USER)
  cart        Cart?
  transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  image           String?
  price           Int
  stock           Int
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CartItem        CartItem[]
  transactionItem TransactionItem[]

  @@map("product")
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  totalPrice  Int           @default(0)
  transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart")
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int
  product    Product @relation(fields: [productId], references: [id])
  cart       Cart    @relation(fields: [cartId], references: [id])
  totalPrice Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItem")
}

model Transaction {
  id              Int                   @id @default(autoincrement())
  userId          Int
  cartId          Int
  transactionId   String                @unique
  amount          Int
  status          TransactionStatusEnum @default(PENDING)
  paymentUrl      String?
  TransactionItem TransactionItem[]

  user User @relation(fields: [userId], references: [id])
  cart Cart @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  subTotal      Int
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@map("transactionItem")
}

enum TransactionStatusEnum {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum RoleEnum {
  ADMIN
  USER
}

enum GenderEnum {
  MALE
  FEMALE
  DEMIGOD
}
